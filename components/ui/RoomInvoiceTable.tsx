import React, { useState } from "react";
import {
  Card,
  Table,
  Tag,
  Modal,
  Descriptions,
  Button,
  Space,
  Typography,
} from "antd";
import Image from "next/image";
const { Text } = Typography;

interface Service {
  name: string;
  price: number; // ƒë∆°n gi√°
  unit: string; // "ƒë/ng∆∞·ªùi" | "ƒë/ph√≤ng"
  amount: number; // ƒë√£ t√≠nh s·∫µn
}

interface Invoice {
  _id: string;
  roomId: string;
  year: number;
  month: number;
  water: { pre: number; after: number };
  elec: { pre: number; after: number };
  services: Service[]; // c√°c d·ªãch v·ª• ngo√†i ƒëi·ªán n∆∞·ªõc
  totalMembers: number;
  totalAmount: number;
  images: string[];
  status: "UNPAID" | "PARTIALLY_PAID" | "PAID" | "CANCELLED";
}

interface RoomDetailInvoicesProps {
  allInvoice: Invoice[]; // m·∫£ng invoices c·ªßa ph√≤ng
  roomPrice: number; // gi√° thu√™ cƒÉn b·∫£n c·ªßa ph√≤ng
  isOwner: boolean; // true n·∫øu user l√† ch·ªß
  onStatusUpdate: (id: string, status: Invoice["status"]) => void;
  // h√†m g·ªçi API khi ƒë·ªïi status
}

export default function RoomInvoicesTable({
  allInvoice,
  roomPrice,
  isOwner,
  onStatusUpdate,
}: RoomDetailInvoicesProps) {
  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [previewVisible, setPreviewVisible] = useState(false);
  const [previewImage, setPreviewImage] = useState("");

  // Khi user click 1 h√†ng
  const handleRowClick = (record: Invoice) => {
    setSelectedInvoice(record);
    setModalVisible(true);
  };

  // Khi user thay ƒë·ªïi status n·∫øu l√† owner
  const handleStatusChange = (id: string, newStatus: Invoice["status"]) => {
    onStatusUpdate?.(id, newStatus);
  };

  // Format "Th√°ng/NƒÉm" t·ª´ month, year
  const renderMonthYear = (value: any, record: Invoice) => {
    return `${String(record.month).padStart(2, "0")}/${record.year}`;
  };

  // Render c·ªôt T√¨nh tr·∫°ng
  const renderStatus = (_: any, record: Invoice) => {
    let color = "red";
    if (record.status === "PAID") color = "green";
    else if (record.status === "PARTIALLY_PAID") color = "orange";
    else if (record.status === "CANCELLED") color = "gray";
    return (
      <Tag color={color}>
        {record.status === "UNPAID" ? "Ch∆∞a ƒë√≥ng" : "ƒê√£ ƒë√≥ng"}
      </Tag>
    );
  };

  return (
    <>
      <Card title="üí∞ H√≥a ƒë∆°n ti·ªÅn ph√≤ng">
        <Table<Invoice>
          dataSource={allInvoice}
          rowKey="_id"
          size="small"
          pagination={false}
        >
          <Table.Column
            title="Th√°ng/NƒÉm"
            dataIndex="month"
            key="monthYear"
            render={renderMonthYear}
          />
          <Table.Column
            title="T·ªïng ti·ªÅn tr·ªç"
            dataIndex="totalAmount"
            key="totalAmount"
            render={(val: number) => <Text>{val.toLocaleString()} ƒë</Text>}
          />
          <Table.Column
            title="T√¨nh tr·∫°ng"
            dataIndex="status"
            key="status"
            render={renderStatus}
          />
          <Table.Column
            key="details"
            render={(_: any, record: Invoice) => (
              <Button type="link" onClick={() => handleRowClick(record)}>
                Xem chi ti·∫øt
              </Button>
            )}
          />
          {isOwner && (
            <Table.Column
              title="X√°c nh·∫≠n"
              key="verify"
              render={(_: any, record: Invoice) =>
                record.status === "PAID" ? (
                  <Button
                    size="small"
                    className="!text-xs"
                    onClick={() => handleStatusChange(record._id, "UNPAID")}
                  >
                    Ch∆∞a ƒë√≥ng ti·ªÅn
                  </Button>
                ) : (
                  <Button
                    size="small"
                    className="!text-xs"
                    onClick={() => handleStatusChange(record._id, "PAID")}
                  >
                    ƒê√£ ƒë√≥ng ti·ªÅn
                  </Button>
                )
              }
            />
          )}
        </Table>
      </Card>

      <Modal
        title="Chi ti·∫øt h√≥a ƒë∆°n"
        visible={modalVisible}
        footer={<Button onClick={() => setModalVisible(false)}>ƒê√≥ng</Button>}
        onCancel={() => setModalVisible(false)}
        width={600}
      >
        {selectedInvoice && (
          <Descriptions
            column={1}
            bordered
            size="small"
            title={`H√≥a ƒë∆°n th√°ng ${String(selectedInvoice.month).padStart(
              2,
              "0"
            )}/${selectedInvoice.year}`}
          >
            <Descriptions.Item label="Gi√° thu√™ cƒÉn b·∫£n">
              {roomPrice.toLocaleString()} ƒë
            </Descriptions.Item>

            <Descriptions.Item label="ƒêi·ªán (s·ªë ti√™u th·ª•)">
              {selectedInvoice.elec.after - selectedInvoice.elec.pre} (
              {selectedInvoice.elec.pre} - {selectedInvoice.elec.after})
            </Descriptions.Item>

            <Descriptions.Item label="N∆∞·ªõc (s·ªë ti√™u th·ª•)">
              {selectedInvoice.water.after - selectedInvoice.water.pre} (
              {selectedInvoice.water.pre} - {selectedInvoice.water.after})
            </Descriptions.Item>

            {selectedInvoice.services.length > 0 && (
              <Descriptions.Item label="D·ªãch v·ª• kh√°c">
                {selectedInvoice.services.map((s, idx) => (
                  <div key={idx}>
                    {s.name}: {s.amount.toLocaleString()}ƒë (
                    {s.unit === "ƒë/ng∆∞·ªùi"
                      ? `ƒë∆°n gi√° ${s.price.toLocaleString()}ƒë√ó${
                          selectedInvoice.totalMembers
                        }ng∆∞·ªùi`
                      : `ƒë∆°n gi√° ${s.price.toLocaleString()}`}
                    )
                  </div>
                ))}
              </Descriptions.Item>
            )}

            <Descriptions.Item label="T·ªïng c·ªông">
              <Text strong>
                {selectedInvoice.totalAmount.toLocaleString()} ƒë
              </Text>
            </Descriptions.Item>

            <Descriptions.Item label="T√¨nh tr·∫°ng">
              <Tag
                color={
                  selectedInvoice.status === "PAID"
                    ? "green"
                    : selectedInvoice.status === "PARTIALLY_PAID"
                    ? "orange"
                    : selectedInvoice.status === "CANCELLED"
                    ? "gray"
                    : "red"
                }
              >
                {selectedInvoice.status === "UNPAID"
                  ? "Ch∆∞a ƒë√≥ng"
                  : selectedInvoice.status === "PARTIALLY_PAID"
                  ? "ƒê√£ ƒë√≥ng m·ªôt ph·∫ßn"
                  : selectedInvoice.status === "PAID"
                  ? "ƒê√£ ƒë√≥ng"
                  : "H·ªßy"}
              </Tag>
            </Descriptions.Item>

            {selectedInvoice.images.length > 0 && (
              <Descriptions.Item label="·∫¢nh ch·ª•p c√¥ng t∆°">
                <Space wrap>
                  {selectedInvoice.images.map((url, idx) => (
                    <div
                      key={idx}
                      style={{
                        width: 100,
                        height: 100,
                        position: "relative",
                        border: "1px solid #f0f0f0",
                        borderRadius: 4,
                        overflow: "hidden",
                      }}
                    >
                      <Image
                        src={url}
                        alt={`Invoice Image ${idx + 1}`}
                        layout="fill"
                        objectFit="cover"
                        onClick={() => {
                          // Preview to√†n m√†n h√¨nh
                          setPreviewImage(url);
                          setPreviewVisible(true);
                        }}
                        style={{ cursor: "pointer" }}
                      />
                    </div>
                  ))}
                </Space>
              </Descriptions.Item>
            )}
          </Descriptions>
        )}
      </Modal>

      {/* Modal preview h√¨nh ·∫£nh */}
      <Modal
        open={previewVisible}
        footer={null}
        onCancel={() => setPreviewVisible(false)}
        centered
        width={600}
      >
        <div
          style={{
            position: "relative",
            width: "100%",
            paddingBottom: "56.25%", // t·ªâ l·ªá 16:9
          }}
        >
          <Image
            src={previewImage}
            alt="Preview"
            layout="fill"
            objectFit="contain"
            priority
          />
        </div>
      </Modal>
    </>
  );
}
